#!/bin/bash


k=25
b=200
m=50
a=150
f=
export threads=`nproc`
infile=
export outdir="./sibeliaz_out"
align="True"
noseq=""

args=("$@")
args=$(printf " %s" "${args[@]}")
args=${args:1}

usage () { echo "Usage: [-k <odd integer>] [-b <integer>] [-m <integer>] [-a <integer>] [-t <integer>] [-f <integer>] [-o <output_directory>] [-n] <input file> " ;}

options='t:k:b:a:m:o:f:nh'
while getopts $options option
do
    case $option in
	k  ) k=$OPTARG;;
	b  ) b=$OPTARG;;
	m  ) m=$OPTARG;;
	a  ) a=$OPTARG;;
	t  ) threads=$OPTARG;;
	o  ) outdir=$OPTARG;;
	f  ) f=$OPTARG;;
	n  ) align="False";;
	h  ) usage; exit;;
	\? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
	:  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
	*  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done


shift "$((OPTIND-1))"

if [ "$align" = "False" ]
then
	noseq="--noseq"
fi

if [ -z "$1" ]
then
	echo "You must provide the input file name" >&2
	exit 1
fi

min() {
   [ "$1" -lt "$2" ] && echo $1 || echo $2
}

max() {
   [ "$1" -lt "$2" ] && echo $2 || echo $1
}

export outdir
export outfile="$outdir/alignment.maf"

align()
{
        output="$(spoa $1 -l 1 -r 1 -e -8 2> /dev/null | sed -e '/>/d')"
        rcode="${PIPESTATUS[0]}"
        if [[ -z "${output// }" ]]
        then
		rm $1
                return
        fi

	filename=$(basename -- "$1")
	alignment_output="$3"
        if [ $? -eq 0 ]
        then
		lines=`echo -n "$output" | grep -c '^'`
		header="$(sed -n -e '/^>/p' $1 | cut -d' ' -f2- | sed  's/;/ /g' | sed -e 's/^/s /' | head -n $lines)"
		echo "" >> "$alignment_output"
		echo "a" >> "$alignment_output"
		paste <(echo "$header") <(echo "$output") --delimiters ' ' >> "$alignment_output"
        fi

	rm $1
}

block_align()
{
	out="$outdir/$(basename $1 | cut -f 1 -d '.').msa"
	while read p; do
		input=${p//@/'\n'}
		fasta=$(mktemp --suffix=.fa $outdir/block.XXXXX)
		echo -e $input > $fasta
		align $fasta $2 $out
	done < $1
}

export -f align
export -f block_align

infile="$@"

if [ -z "$f" ]
then
	export memory_avail=`free -g -w | head -2 | tail -1 | awk '{print $2}'`
	total_size=0
	IFS=' ' read -ra ADDR <<< "$infile"
	for i in "${ADDR[@]}"; do
        	total_size=$((total_size + `stat -c "%s" $i`))
	done

	total_size=$((total_size * 3 / 1000000000))
	f=$( min $total_size $memory_avail )
	f=$( max $f 4 )
fi

global_alignment()
{
	echo "Performing global alignment.."
        echo "##maf version=1" > "$outfile"
	echo "# sibeliaz v1.2.7 " >> "$outfile"
	echo "# cmd=$1" >> "$outfile"

	memory_min=`free -k -w | head -2 | tail -1 | awk '{print $2}'`
	ulimit $memory_min
        find $outdir -name "*.tmp" -printf "%p\n" | xargs -I @ -P $threads bash -c "block_align @ '$outfile'"

	export LC_ALL=C
	find $outdir -name "*.msa"  -print0 | sort -z | xargs -0 cat >> "$outfile"
        rm -rf $outdir/*.msa
        rm -rf $outdir/*.tmp
}

export -f global_alignment

twopaco_threads=$( min $threads 16 )
lcb_threads=$( min $threads 32 )
dbg_file=$outdir/de_bruijn_graph.dbg

mkdir -p $outdir
echo "Constructing the graph..."

twopaco --tmpdir $outdir -t $twopaco_threads -k $k --filtermemory $f -o $dbg_file $infile
sibeliaz-lcb --graph $dbg_file $infile -k $k -b $b -o $outdir -m $m -t $lcb_threads --abundance $a $noseq --chunks 256

rm $dbg_file
if [ "$align" = "True" ]
then
	bash -c "global_alignment '$args'"
fi





